// Generated by CoffeeScript 2.4.1
(function() {
  /*
   * @author Jinzulen
   * @license Apache 2.0
   * @copyright Copyright 2020 Khalil G. <https://github.com/Jinzulen>
   */
  var Cache, HTTPS;

  HTTPS = require("https");

  Cache = require("./EmojiCache");

  exports.GrabCategories = function() {
    if (!Cache.getCache("/Categories")) {
      return this.contactAPI("https://emoji.gg/api/?request=categories", function(Error, Data) {
        if (Error) {
          throw Error;
        }
      });
    }
  };

  exports.contactAPI = function(Endpoint, Callback) {
    var E, Key, Stores;
    try {
      Stores = {
        "https://emoji.gg/api/": "/Emoji",
        "https://emoji.gg/api/packs": "/Packs",
        "https://emoji.gg/api/?request=stats": "/Stats",
        "https://emoji.gg/api/?request=categories": "/Categories"
      };
      Key = Cache.getCache(Stores[Endpoint]);
      if (!Key) {
        return HTTPS.get(Endpoint, function(Response) {
          var Code, Error, Type, rawData;
          Error = "";
          rawData = "";
          Code = Response.statusCode;
          Type = Response.headers["content-type"];
          if (Code !== 200) {
            Error = "# [DEmojiJS] Could not issue request @ " + Endpoint;
          }
          if (Error) {
            Response.resume();
            Callback(Error);
          }
          Response.setEncoding("utf8");
          Response.on("data", function(Buffer) {
            return rawData += JSON.parse(JSON.stringify(Buffer));
          });
          return Response.on("end", function() {
            var Data, E;
            try {
              Data = rawData;
              Cache.setCache(Stores[Endpoint], Data);
            } catch (error) {
              E = error;
              throw E;
            }
            return Callback(Error, JSON.parse(Data));
          });
        });
      } else {
        return Callback(null, JSON.parse(Key));
      }
    } catch (error) {
      E = error;
      throw E;
    }
  };

}).call(this);
